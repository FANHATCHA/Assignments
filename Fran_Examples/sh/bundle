#! /bin/sh

#		shell archiving utility -- Fall 94
#		Andrew Hamilton-Wright

#		This util uses tar, compress and uuencode to try to reduce
#		mail spool overload


if [ $# -lt 2 ]
then
		echo "Use:"
		echo "bundle <basename> <file1> <file2> ... "
		echo "	This utility will create a (mailable) shell archive of all"
		echo "	files listed on the command line, in the file '<basename>'."
		echo "	When this archive is run, the code will be put in a direc-"
		echo "	tory named \"$USER\" (ie; named after the creating user)."
		echo " "
		echo "Example:"
		echo "  % bundle mysharfile.sh *.c *.h makefile"
		echo " "
		echo "	will put all C code, with header files and makefile into a"
		echo "	mailable, executable archive called 'mysharfile.sh'"
		echo " "
		exit 1
fi

COMPRESSUTIL="gzip"
UNCOMPRESSUTIL="gzcat"
COMPRESSEXT=.z


## check that the USER variable is set

if [ -z "$USER" ]
then
		echo "The USER variable is not set -- your shell is broken."
		exit 1
fi

basename=$1
shift

tarname=${basename}.tar
compname=${basename}.tar${COMPRESSEXT}
uuname=${basename}.uu
sharname=${basename}

if [ -s ${basename} ]
then
		echo "Destination file \"${basename}\" already exists!"
		exit 1
fi



echo "#	testing for invalid files "

tarlist=""
for testfile in $@
do
		echo "#	    testing file \"${testfile}\" "

		test_o=`expr ${testfile} : '.*[.]o$' `
		test_core=`expr ${testfile} : '.*core$' `

		if [ `expr ${test_o} \> 0` -eq 1 ]
			then
				echo "${testfile} is a .o -- not including in archive"

		elif [ `expr ${test_core} \> 0` -eq 1 ]
			then
				echo "${testfile} is a core -- not including in archive"

		elif [ ${testfile} = "a.out" ]
			then
				echo "${testfile} is a.out -- not including in archive"

		elif [ -x ${testfile} ]
			then
				echo -n "${testfile} is executable -- "
				if
					file ${testfile} | grep "script" > /dev/null
				then
					echo "shell script file accepted"
					tarlist="${tarlist} ${testfile}"
				else
					echo "not including in archive"
				fi

		else
			tarlist="${tarlist} ${testfile}"
		fi
done



echo "#	Creating tar file \"${tarname}\""

if
		tar cvf ${tarname} ${tarlist}
then
		:
else
		echo "ERROR:  Cannot create tar tile \"${tarname}\""
		exit 1
fi

echo "#	Compressing tar file \"${tarname}\" to \"${compname}\""
if
		${COMPRESSUTIL} < ${tarname} > ${compname}
then
		:
else
		echo "ERROR:  Cannot compress"
		exit 1
fi

echo "#	Removing tar file \"${tarname}\" "
rm ${tarname}

echo "#	Uuencoding result to file \"${uuname}\""
if
		uuencode ${compname} ${compname} > ${uuname}
then
		:
else
		echo "ERROR:  Cannot uuencode"
		exit 1
fi


echo "#	Removing \"${compname}\""
rm ${compname}

echo "#	Creating shar file \"${sharname}\""

		#	note that $USER in the following is calculated
		#	at the time the archive is _created_, so will
		#	reflect the achive creator user id.

## make ${sharname} be of zero size
cat /dev/null > ${sharname}

## add in optional header
cat << END_OF_PART_HEAD >> ${sharname}
XXX
XXXThis is a shell archive, created by the Univeristy of Guelph
XXX'bundle' command.  This is probably the easiest way to
XXXtransmit blocks of code through the mail.
XXX
XXXIn order to use the data in this file, simply cut out all
XXXlines up to the point indicated below (with 'CUT HERE'), save
XXXthis file, and then run using the shell 'sh'.
XXX
XXX
XXXExample:
XXX
XXX	% sh my_file
XXX
XXXwhere 'my_file' is the new file.
XXX
XXX
XXXThe archive will then extract all code embedded within it,
XXXplacing this code in a directory called "$USER".
XXX
XXX---- CUT HERE ------------------------------------------------
END_OF_PART_HEAD


## add in beginning of unpack script header
cat << END_OF_PART_ONE > ${sharname}
#! /bin/sh
#		This should be the second line of the archived file


		#	This file generated by the $0 utility,



		if [ -d $USER ]
		then
			echo "##	Using existing directory \\"$USER\\""
			echo " "
		elif
			mkdir $USER
		then
			echo "##	Creating dir \\"$USER\\""
			echo " "
			:
		else
			echo "ERROR:  Cannot create directory"
			exit 1
		fi

		if
			cd $USER
		then
			:
		else
			echo "ERROR:  Cannot change directory"
			exit 1
		fi

		echo " "
		echo "##	Uudecodeing tar file"
		echo " "

		cat << \\EndOfUuencodedFile > tmp.uu
END_OF_PART_ONE
#		This marks the end of the unpack code -- back to creation code


cat < ${uuname} >> ${sharname}

echo "#	Removing \"${uuname}\""
rm ${uuname}

cat << END_OF_PART_TWO >> ${sharname}
EndOfUuencodedFile

		if
			uudecode tmp.uu
		then
			:
		else
			echo "ERROR:  uudecode failed"
			exit 1
		fi


		rm tmp.uu
		echo " "
		echo "##	Finished uudecodeing, extracting tar file ${tarname}"
		echo " "
		if
			${UNCOMPRESSUTIL} ${compname} > ${tarname}
		then
			:
		else
			echo "ERROR:  uncompress failed"
			exit 1
		fi


		if
			tar xvf ${tarname}
		then
			:
		else
			echo "ERROR:  untar failed"
			exit 1
		fi

		echo " "
		echo "##	Extraction successful"
		echo " "

		exit 0

#		This should be the last line of the shell archive.  Any
#		data after this point is spurious.
END_OF_PART_TWO

echo " "
echo "##	Shell archive \"${sharname}\" created"

exit 0

